{"0": {
    "doc": "Provisioning Validator",
    "title": "Provisioning Validator",
    "content": "Once you have provided the values in the creating validator guide, sdo will take over and perform initial configuration on the server which is creating a user named sdo, giving it sudo privilidges, and setup sane defaults on the server for SSH. After performing these steps, sdo will exit with next commands displayed to be executed. The command to provision the server is . sdo validator provision . If executed without providing any values for flags which are network and pubkey of validator, sdo will ask for the following . ? What is the validator network? (Use arrow keys) ❯ testnet mainnet ✔ What is the validator network? testnet . Once chosen the network upon which the validator is supposed to be deployed, you will be asked to provide identity public key of the validator. ? What is the validator public key? ✔ What is the validator public key? 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM . After getting the values for network and public key of validator, sdo takes over and performs a lenghty series of operations on the server. A word of caution, in case of Firedancer, it will take some time to build it. So! don’t be quick to think that the operations are stuck, give it some time and eventually it will start the validator software. ",
    "url": "/docs/getting-started/provisioning-validator/",
    
    "relUrl": "/docs/getting-started/provisioning-validator/"
  },"1": {
    "doc": "Setting Active Identity",
    "title": "Setting Active Identity",
    "content": "After creating validator, provisioning it, and generating vote account, it is time to check whether validator has been setup correctly. Login to your server as sdo user and execute follwing command . agave-validator -l /mnt/ledger monitor . In case everything goes according to plan, you should see some output like this with numbers varied . Ledger location: /mnt/ledger/ Identity: 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM Genesis Hash: 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY ⠐ 125:43:28 | Processed Slot: 344033427 | Confirmed Slot: 344033426 | Finalized Slot: 344033389 | Full Snapshot Slot: 344024662 | Incremental Sna . There might be some varied input like downloading snapshot, catching up or, loading ledger. In that case, the startup has’nt completed. Wait for it to complete. sdo sets up the validator with a random and unstaked identity to avoid problems like double voting and etc. So, in order to finally go online on Solana’s network, you have to change it with the identity public key supplied at start. Run the following command on your local computer to do that . sdo validator set-active-identity . It will ask for the network and public key of the validator. ? What is the validator network? (Use arrow keys) ❯ testnet mainnet ✔ What is the validator network? testnet . Once chosen the network upon which the validator is supposed to be deployed, you will be asked to provide identity public key of the validator. ? What is the validator public key? ✔ What is the validator public key? 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM . If the startup of validator is complete, sdo will change the public key of validator from unstaked to active one. That’s it. Now you have a running validator on Solana’s network. ",
    "url": "/docs/getting-started/set-active-identity/",
    
    "relUrl": "/docs/getting-started/set-active-identity/"
  },"2": {
    "doc": "Creating Validator",
    "title": "Creating Validator",
    "content": ". | OS | PACKAGES | INSTALLATION | VALIDATOR CREATION | 1. Validator network | 2. Username for SSH connection to server | 3. IP address of the server | 4. Private key path of the SSH user | 5. SSH connection check | 6. Validator software | 7. Validator identity public key | 8. Server Name | 9. Validator vote key | 10. Validator authority key | . sdo expects the following present on your system before its installation and operation. OS . Linux or MacOSX. For Windows, kindly use WSL2 for Windows . PACKAGES . | NodeJS | Python 3 | Ansible | Solana | . INSTALLATION . npm install -g @skipline/sdo . VALIDATOR CREATION . sdo validator create . 1. Validator network . ? What is the validator network? (Use arrow keys) ❯ testnet mainnet . ✔ What is the validator network? testnet . 2. Username for SSH connection to server . This depends upon your OS installed on the server and later its configuration for a new user. Default value is root. ? What is the SSH user to connect as? (root) . ✔ What is the SSH user to connect as? root . 3. IP address of the server . This is the IP of the server to which SSH connection is to be established. ? What is the IP address of the validator server? . ✔ What is the IP address of the validator server? 191.205.133.188 . 4. Private key path of the SSH user . Supply the path to private key pair which allow previously entered user to access the machine via SSH. In most case, it is at located in ~/.ssh/. The default value reflects that. ? What is the path to the SSH private key? (~/.ssh/id_rsa) . ✔ What is the path to the SSH private key? ~/.ssh/id_rsa . 5. SSH connection check . Once you have supplied the above values, the command prompt will display an indicator that a SSH connection is being established. ⠴ Connecting to validator via SSH... If the connection is established with success, the prompt is going to indicate it like this . SSH connection established successfully . In failure case, the relevant error is displayed and sdo will exit. 6. Validator software . Select the validator software to deploy on the server. In testnet’s case, following are the options. ? Choose validator type (Use arrow keys) ❯ Agave Firedancer . ✔ Choose validator type Agave . In mainnet’s case, the options are as below . ? Choose validator type (Use arrow keys) ❯ Jito Firedancer . ✔ Choose validator type Jito . 7. Validator identity public key . Now choose between providing the Identity public key for validator or generate new one. Default is No meaning you will have to provide public key of existing keypair. ? Do you want to generate a new validator identity keypair? (y/N) ✔ Do you want to generate a new validator identity keypair? No . ✔ Enter the existing validator identity keypair 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM . After entering the public key, sdo is going to ask you to place the keypair at ~/.sdo/keys directory with name of the keypair as &lt;publickey&gt;.json . Make sure the keypair exists at ~/.sdo/keys/32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM.json . 8. Server Name . For your own purpose, you can given the validator server a name which will be stored in slv config for the validators. Default name will be public key of the validator if you don’t provide one. ? Enter a name for the validator (32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM) ✔ Enter a name for the validator 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM . 9. Validator vote key . You have to choose between providing the vote public key for validator or generate new one. Default is No meaning you will have to provide public key of existing keypair. ? Do you want to generate a new validator vote keypair? (y/N) ✔ Do you want to generate a new validator vote keypair? No . ✔ Enter the existing validator vote keypair hsCzPbphXyJnwxXfD5HfpjT5vgYZvLKSU7ZLrVxDSLV . After entering the public key, sdo is going to ask you to place the keypair at ~/.sdo/keys directory with name of the keypair as &lt;publickey&gt;.json . Make sure the keypair exists at ~/.sdo/keys/hsCzPbphXyJnwxXfD5HfpjT5vgYZvLKSU7ZLrVxDSLV.json . 10. Validator authority key . As a last step, select between providing the authority public key for validator or generate new one. Default is No meaning you will have to provide public key of existing keypair. ? Do you want to generate a new validator authority keypair? (y/N) ✔ Do you want to generate a new validator authority keypair? No . ✔ Enter the existing validator authority keypair DCfCsPvYV5qnxWdDgrgpzh3A2jPKPfgzg8J58PaAWZyX . After entering the public key, sdo is going to ask you to place the keypair at ~/.sdo/keys directory with name of the keypair as &lt;publickey&gt;.json . Make sure the keypair exists at ~/.sdo/keys/DCfCsPvYV5qnxWdDgrgpzh3A2jPKPfgzg8J58PaAWZyX.json . ",
    "url": "/docs/getting-started/creating-validator/",
    
    "relUrl": "/docs/getting-started/creating-validator/"
  },"3": {
    "doc": "Generating Vote Account",
    "title": "Generating Vote Account",
    "content": "In order for your validator to work on the Solana network, a vote account is needed to be create for the voting keypair your provided while creating the validator. While your node is being provisioned, you can do the necessary work of creating the vote account. Before executing the sdo command, make sure that there is some SOL on your localhost’s default Solana account. In case of testnet, you can simply request some SOL by sending a request like this . solana airdrop 1 . Once you have balance in the account, and all the keys are in ~/.slv/keys directory, execute the following . sdo validator generate-vote-account . It will ask for the network and public key of the validator. ? What is the validator network? (Use arrow keys) ❯ testnet mainnet ✔ What is the validator network? testnet . Once chosen the network upon which the validator is supposed to be deployed, you will be asked to provide identity public key of the validator. ? What is the validator public key? ✔ What is the validator public key? 32nTAQSAxzSbvURguFvfz5FX1g4enbvgyttMYHr1KJqM . In case everything is in place, a new vote account will be generated fot the vote keypair specified. In case of testnet, the commission is set to 100% and on main net it has to be provided by the user while creating validator. ",
    "url": "/docs/getting-started/generating-vote-account/",
    
    "relUrl": "/docs/getting-started/generating-vote-account/"
  },"4": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "Following are the step by step guides to create and manage the Solana validator. ",
    "url": "/docs/getting-started/",
    
    "relUrl": "/docs/getting-started/"
  },"5": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "SDO (short for Solana Dev Ops) is a command line tool which assists operators to create new and manage existing validators on Solana’s mainnet or testnet. Starting with sdo is as simple as. 1 . npm install -g @skipline/sdo . 2 . sdo validator create . 3 . sdo validator provision -n &lt;network&gt; -p &lt;pubkey&gt; . SDO, sets up validators in a fast and effortless manner. Whether you’re handling routine updates or rolling out complex system changes, everything can be managed with a single command. Say goodbye to time-consuming installations and repetitive maintenance — SDO streamlines the entire process, saving you valuable time and reducing operational overhead. By eliminating the complexities of validator management, you can redirect your focus to strategic tasks that truly drive impact. ",
    "url": "/",
    
    "relUrl": "/"
  }
}
